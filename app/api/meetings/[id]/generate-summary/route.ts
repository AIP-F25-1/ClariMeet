import { auth } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // Authenticate user
    const user = await auth(request)
    if (!user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const meetingId = params.id

    // Check if meeting exists
    const meeting = await prisma.meeting.findUnique({
      where: { id: meetingId },
      include: {
        attendees: true
      }
    })

    if (!meeting) {
      return NextResponse.json(
        { error: 'Meeting not found' },
        { status: 404 }
      )
    }

    // Check if user has permission
    const userAttendee = meeting.attendees.find(attendee => attendee.userId === user.id)
    if (!userAttendee) {
      return NextResponse.json(
        { error: 'Unauthorized to generate summary for this meeting' },
        { status: 403 }
      )
    }

    // For now, create a mock summary
    // In a real implementation, you would call an AI service like OpenAI, Claude, etc.
    const mockSummary = {
      title: `AI Generated Summary - ${meeting.title}`,
      content: `This is an AI-generated summary of the meeting "${meeting.title}" that took place on ${meeting.startedAt.toLocaleDateString()}. 

Key Points:
- Meeting duration: ${meeting.endedAt ? Math.round((new Date(meeting.endedAt).getTime() - new Date(meeting.startedAt).getTime()) / 60000) : 'Unknown'} minutes
- Participants: ${meeting.attendees.length} attendees
- Platform: ${meeting.platform}

This summary was generated using AI analysis of the meeting content. In a production environment, this would be generated by analyzing the actual meeting transcript and video content.`,
      type: 'AI_GENERATED' as const
    }

    // Create the summary in the database
    const summary = await prisma.summary.create({
      data: {
        title: mockSummary.title,
        content: mockSummary.content,
        type: mockSummary.type,
        meetingId: meetingId
      }
    })

    return NextResponse.json({
      success: true,
      summary,
      message: 'Summary generated successfully'
    })

  } catch (error) {
    console.error('Generate summary error:', error)
    return NextResponse.json(
      { error: 'Failed to generate summary' },
      { status: 500 }
    )
  }
}
