// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transcriptions TranscriptChunk[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@unique([email, token])
}

// Maps to your existing table transcript_chunks(id, meeting_id, t0, t1, text, speaker_id, confidence, lang)
// Adds userId to enable filtering by authenticated user
model TranscriptChunk {
  id          String   @id @default(cuid())
  meetingId   String   @map("meeting_id")
  userId      String   @map("user_id")
  t0          Float
  t1          Float
  text        String
  speakerId   String?  @map("speaker_id")
  confidence  Float?
  lang        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("transcript_chunks")
  @@index([userId, createdAt])
}