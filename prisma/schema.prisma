// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  password      String
  role          Role       @default(USER)
  verified      Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  attendees     Attendee[]  // Add this relation
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@unique([email, token])
}

model Meeting {
  id         String    @id @default(cuid())
  orgId      String
  title      String
  startedAt  DateTime
  endedAt    DateTime?
  platform   Platform
  status     MeetingStatus @default(SCHEDULED)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  attendees  Attendee[]
  summaries  Summary[] 
  actions         Action[]
}

model Attendee {
  id        String   @id @default(cuid())
  email     String
  name      String?
  role      AttendeeRole @default(PARTICIPANT)
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
  meetingId String
  user      User?     @relation(fields: [userId], references: [id])  // Add this relation
  userId    String?   // Add this field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([email, meetingId])
}

model Summary {
  id              String    @id @default(cuid())
  meetingId       String
  meeting         Meeting   @relation(fields: [meetingId], references: [id])
  type            SummaryType
  content         String    @db.Text
  evidenceSpanIds String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Action {
  id              String       @id @default(cuid())
  meetingId       String
  meeting         Meeting      @relation(fields: [meetingId], references: [id])
  title           String
  assignee        String
  dueDate         DateTime
  status          ActionStatus @default(PENDING)
  confidence      Float
  evidenceSpanIds String[]
  externalLinks   Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum Platform {
  GOOGLE_MEET
  ZOOM
  TEAMS
  OTHER
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AttendeeRole {
  HOST
  CO_HOST
  PARTICIPANT
}

enum SummaryType {
  KEY_POINTS
  ACTION_ITEMS
  DECISIONS
  HIGHLIGHTS
  FULL_SUMMARY
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
