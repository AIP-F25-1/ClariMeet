generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  password      String
  role          Role       @default(USER)
  verified      Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  attendees     Attendee[]
  transcriptions TranscriptChunk[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([email, token])
}

model Meeting {
  id         String    @id @default(cuid())
  orgId      String
  title      String
  startedAt  DateTime
  endedAt    DateTime?
  platform   Platform
  status     MeetingStatus @default(SCHEDULED)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  attendees  Attendee[]
  summaries  Summary[] 
  actions    Action[]
  decisions  Decision[]
  transcriptChunks TranscriptChunk[]
  videos     Video[]
}

model Video {
  id          String   @id @default(cuid())
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  videoUrl    String
  thumbnailUrl String?
  publicId    String
  duration    Int?
  format      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attendee {
  id        String   @id @default(cuid())
  email     String
  name      String?
  role      AttendeeRole @default(PARTICIPANT)
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
  meetingId String
  user      User?     @relation(fields: [userId], references: [id])  // Add this relation
  userId    String?   // Add this field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([email, meetingId])
}

model Summary {
  id              String    @id @default(cuid())
  meetingId       String
  meeting         Meeting   @relation(fields: [meetingId], references: [id])
  type            SummaryType
  content         String    @db.Text
  evidenceSpanIds String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Decision {
  id              String   @id @default(cuid())
  meetingId       String
  meeting         Meeting  @relation(fields: [meetingId], references: [id])
  statement       String
  rationale       String
  evidenceSpanIds String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Action {
  id              String       @id @default(cuid())
  meetingId       String
  meeting         Meeting      @relation(fields: [meetingId], references: [id])
  title           String
  assignee        String
  dueDate         DateTime
  status          ActionStatus @default(PENDING)
  confidence      Float
  evidenceSpanIds String[]
  externalLinks     Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum Platform {
  GOOGLE_MEET
  ZOOM
  TEAMS
  OTHER
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AttendeeRole {
  HOST
  CO_HOST
  PARTICIPANT
}

enum SummaryType {
  KEY_POINTS
  ACTION_ITEMS
  DECISIONS
  HIGHLIGHTS
  FULL_SUMMARY
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
// Maps to your existing table transcript_chunks(id, meeting_id, t0, t1, text, speaker_id, confidence, lang)
// Adds userId to enable filtering by authenticated user
model TranscriptChunk {
  id         String   @id @default(cuid())
  meetingId  String   @map("meeting_id")
  userId     String   @map("user_id")
  t0         Float
  t1         Float
  text       String
  speakerId  String?  @map("speaker_id")
  confidence Float?
  lang       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  meeting    Meeting  @relation(fields: [meetingId], references: [id])

  @@index([userId, createdAt])
  @@map("transcript_chunks")
}

enum Role {
  USER
  ADMIN
}
